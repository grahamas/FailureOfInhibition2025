name: CI Tests

on:
  push:
    branches: [ "main", "master" ]
  pull_request:
    branches: [ "main", "master" ]
  workflow_dispatch:

jobs:
  test:
    name: Julia ${{ matrix.version }} - ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        version:
          - '1.10'     # LTS version
        os:
          - ubuntu-latest
          # - windows-latest
          # - macOS-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Julia
        uses: julia-actions/setup-julia@v1
        with:
          version: ${{ matrix.version }}
          arch: x64
      
      - name: Cache Julia packages
        uses: julia-actions/cache@v1
      
      - name: Install dependencies
        run: |
          julia --project=. -e "
            using Pkg
            Pkg.instantiate()
            Pkg.precompile()
          "
      
      - name: Run tests
        run: |
          julia --project=. -e "
            using Pkg
            Pkg.test(coverage=true)
          "
      
      - name: Run examples
        run: |
          julia --project=. examples/example_sigmoid.jl
      
      - name: Process coverage
        uses: julia-actions/julia-processcoverage@v1
        if: matrix.version == '1.11' && matrix.os == 'ubuntu-latest'
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        if: matrix.version == '1.11' && matrix.os == 'ubuntu-latest'
        with:
          files: lcov.info
          fail_ci_if_error: false

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Julia
        uses: julia-actions/setup-julia@v1
        with:
          version: '1.11'
      
      - name: Install dependencies
        run: |
          julia --project=. -e "
            using Pkg
            Pkg.instantiate()
          "
      
      - name: Build documentation (if docs exist)
        run: |
          julia --project=. -e "
            using Pkg
            if isdir(\"docs\")
              Pkg.activate(\"docs\")
              Pkg.instantiate()
              include(\"docs/make.jl\")
            else
              println(\"No docs directory found, skipping documentation build\")
            end
          "
        continue-on-error: true

  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Julia
        uses: julia-actions/setup-julia@v1
        with:
          version: '1.11'
      
      - name: Install dependencies
        run: |
          julia --project=. -e "
            using Pkg
            Pkg.instantiate()
          "
      
      - name: Check code formatting (if JuliaFormatter is available)
        run: |
          julia --project=. -e "
            try
              using JuliaFormatter
              format_check = format(\".\"  ; verbose=true)
              if !format_check
                error(\"Code is not properly formatted. Please run: julia -e 'using JuliaFormatter; format(\\\".\\\")')\")
              end
              println(\"âœ“ Code formatting is correct\")
            catch e
              if e isa ArgumentError && contains(string(e), \"JuliaFormatter\")
                println(\"JuliaFormatter not installed, skipping format check\")
              else
                rethrow(e)
              end
            end
          "
        continue-on-error: true
      
      - name: Run package tests in strict mode
        run: |
          julia --project=. -e "
            using Pkg
            # Test in strict mode to catch potential issues
            ENV[\"JULIA_NUM_THREADS\"] = \"1\"
            Pkg.test()
          "

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Julia
        uses: julia-actions/setup-julia@v1
        with:
          version: '1.11'
      
      - name: Install dependencies
        run: |
          julia --project=. -e "
            using Pkg
            Pkg.instantiate()
          "
      
      - name: Run all examples
        run: |
          # Find and run all Julia example files
          find examples/ -name "*.jl" -type f | while read -r example; do
            echo "Running example: $example"
            julia --project=. "$example"
            echo "âœ“ $example completed successfully"
          done
      
      - name: Test package loading and basic functionality
        run: |
          julia --project=. -e "
            using FailureOfInhibition2025
            println(\"âœ“ Package loaded successfully\")
            
            # Test basic functionality
            sigmoid = SigmoidNonlinearity(a=2.0, Î¸=0.5)
            println(\"âœ“ SigmoidNonlinearity created: \", sigmoid)
            
            result = simple_sigmoid(0.5, 2.0, 0.5)
            println(\"âœ“ simple_sigmoid(0.5, 2.0, 0.5) = \", result)
            
            # Test basic model components
            test_array = [0.1, 0.5, 1.0]
            pop = population(test_array, 1)
            println(\"âœ“ population function works: \", pop)
            
            println(\"ðŸŽ‰ All integration tests passed!\")
          "
